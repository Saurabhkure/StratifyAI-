-- Description: This script populates the STOCK_FEATURES table with aggregated stock data on an hourly basis.

INSERT INTO FIRSTDB.PUBLIC.STOCK_FEATURES (
    SYMBOL,
    INTERVAL_TS,
    OPEN_PRICE,
    CLOSE_PRICE,
    HIGH_PRICE,
    LOW_PRICE,
    TOTAL_VOLUME,
    RETURN,
    VOLATILITY
)
SELECT
    SYMBOL,
    DATE_TRUNC('hour', TS) AS INTERVAL_TS,
    FIRST_VALUE(OPEN) OVER (PARTITION BY SYMBOL, DATE_TRUNC('hour', TS) ORDER BY TS ASC) AS OPEN_PRICE,
        LAST_VALUE(CLOSE) OVER (PARTITION BY SYMBOL, DATE_TRUNC('hour', TS) ORDER BY TS ASC
                            ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS CLOSE_PRICE,
        MAX(HIGH) OVER (PARTITION BY SYMBOL, DATE_TRUNC('hour', TS)) AS HIGH_PRICE,
        MIN(LOW) OVER (PARTITION BY SYMBOL, DATE_TRUNC('hour', TS)) AS LOW_PRICE,
        SUM(VOLUME) OVER (PARTITION BY SYMBOL, DATE_TRUNC('hour', TS)) AS TOTAL_VOLUME,
        (LAST_VALUE(CLOSE) OVER (PARTITION BY SYMBOL, DATE_TRUNC('hour', TS) ORDER BY TS ASC
                            ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
     - FIRST_VALUE(OPEN) OVER (PARTITION BY SYMBOL, DATE_TRUNC('hour', TS) ORDER BY TS ASC)
            ) / FIRST_VALUE(OPEN) OVER (PARTITION BY SYMBOL, DATE_TRUNC('hour', TS) ORDER BY TS ASC) AS RETURN,
        STDDEV(CLOSE) OVER (PARTITION BY SYMBOL, DATE_TRUNC('hour', TS)) AS VOLATILITY
FROM FIRSTDB.PUBLIC.STOCK_PRICES
         QUALIFY ROW_NUMBER() OVER (PARTITION BY SYMBOL, DATE_TRUNC('hour', TS) ORDER BY TS ASC) = 1;
